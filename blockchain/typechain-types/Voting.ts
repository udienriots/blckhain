/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Voting {
  export type CandidateStruct = { name: string; voteCount: BigNumberish };

  export type CandidateStructOutput = [name: string, voteCount: bigint] & {
    name: string;
    voteCount: bigint;
  };
}

export interface VotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "candidates"
      | "closeVoting"
      | "getCandidates"
      | "hasVoted"
      | "registerCandidate"
      | "startVoting"
      | "vote"
      | "votingOpen"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CandidateRegistered"
      | "Voted"
      | "VotingClosed"
      | "VotingStarted"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "candidates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeVoting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCandidates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerCandidate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "startVoting",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vote", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "votingOpen",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "candidates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votingOpen", data: BytesLike): Result;
}

export namespace CandidateRegisteredEvent {
  export type InputTuple = [candidateId: BigNumberish, name: string];
  export type OutputTuple = [candidateId: bigint, name: string];
  export interface OutputObject {
    candidateId: bigint;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotedEvent {
  export type InputTuple = [voter: AddressLike, candidateId: BigNumberish];
  export type OutputTuple = [voter: string, candidateId: bigint];
  export interface OutputObject {
    voter: string;
    candidateId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingClosedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingStartedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Voting extends BaseContract {
  connect(runner?: ContractRunner | null): Voting;
  waitForDeployment(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  candidates: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { name: string; voteCount: bigint }],
    "view"
  >;

  closeVoting: TypedContractMethod<[], [void], "nonpayable">;

  getCandidates: TypedContractMethod<
    [],
    [Voting.CandidateStructOutput[]],
    "view"
  >;

  hasVoted: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  registerCandidate: TypedContractMethod<[name: string], [void], "nonpayable">;

  startVoting: TypedContractMethod<[], [void], "nonpayable">;

  vote: TypedContractMethod<[candidateId: BigNumberish], [void], "nonpayable">;

  votingOpen: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "candidates"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { name: string; voteCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "closeVoting"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCandidates"
  ): TypedContractMethod<[], [Voting.CandidateStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "hasVoted"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerCandidate"
  ): TypedContractMethod<[name: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startVoting"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<[candidateId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "votingOpen"
  ): TypedContractMethod<[], [boolean], "view">;

  getEvent(
    key: "CandidateRegistered"
  ): TypedContractEvent<
    CandidateRegisteredEvent.InputTuple,
    CandidateRegisteredEvent.OutputTuple,
    CandidateRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "Voted"
  ): TypedContractEvent<
    VotedEvent.InputTuple,
    VotedEvent.OutputTuple,
    VotedEvent.OutputObject
  >;
  getEvent(
    key: "VotingClosed"
  ): TypedContractEvent<
    VotingClosedEvent.InputTuple,
    VotingClosedEvent.OutputTuple,
    VotingClosedEvent.OutputObject
  >;
  getEvent(
    key: "VotingStarted"
  ): TypedContractEvent<
    VotingStartedEvent.InputTuple,
    VotingStartedEvent.OutputTuple,
    VotingStartedEvent.OutputObject
  >;

  filters: {
    "CandidateRegistered(uint256,string)": TypedContractEvent<
      CandidateRegisteredEvent.InputTuple,
      CandidateRegisteredEvent.OutputTuple,
      CandidateRegisteredEvent.OutputObject
    >;
    CandidateRegistered: TypedContractEvent<
      CandidateRegisteredEvent.InputTuple,
      CandidateRegisteredEvent.OutputTuple,
      CandidateRegisteredEvent.OutputObject
    >;

    "Voted(address,uint256)": TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;
    Voted: TypedContractEvent<
      VotedEvent.InputTuple,
      VotedEvent.OutputTuple,
      VotedEvent.OutputObject
    >;

    "VotingClosed()": TypedContractEvent<
      VotingClosedEvent.InputTuple,
      VotingClosedEvent.OutputTuple,
      VotingClosedEvent.OutputObject
    >;
    VotingClosed: TypedContractEvent<
      VotingClosedEvent.InputTuple,
      VotingClosedEvent.OutputTuple,
      VotingClosedEvent.OutputObject
    >;

    "VotingStarted()": TypedContractEvent<
      VotingStartedEvent.InputTuple,
      VotingStartedEvent.OutputTuple,
      VotingStartedEvent.OutputObject
    >;
    VotingStarted: TypedContractEvent<
      VotingStartedEvent.InputTuple,
      VotingStartedEvent.OutputTuple,
      VotingStartedEvent.OutputObject
    >;
  };
}
